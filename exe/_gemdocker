#!/usr/bin/env ruby

require_relative '../lib/docker/cli'

include TR::CondUtils

pmt = TTY::Prompt.new

root = Dir.getwd
dockerfile = File.join(root, "Dockerfile")

# Should spin off jruby:9.4.2.0-jdk and land on console
# > gemdocker jruby:9.4.2.0-jdk
# 


again = true
while again
  if not File.exist?(dockerfile)
    dockerfile = pmt.ask(" #{dockerfile} does not exist. Please provide new location of Dockerfile: ", required: true) 
  else
    again = false
  end
end


cf = Docker::Cli::CommandFactory.new
begin

  existing = false
  again = true
  while again
    dname = pmt.ask("Please provide name of image at local : ", required: true)
    ficr = cf.find_image(dname)
    if ficr.success?
      if ficr.is_out_stream_empty?
        again = false
      else
        reuse = pmt.yes?(" Given local image name '#{dname}' already taken. Use back the same image? 'No' to retry with new name : ")
        if not reuse
          again
        else
          existing = true
        end
      end
    else
      raise CommandFailed, "Failed to find Docker image. Error was : #{ficr.err_stream}"
    end
  end

  if not existing 
    cr = cf.build_image(dname, dockerfile: dockerfile).run
    STDOUT.puts cr.out_stream if not cr.is_out_stream_empty?
    raise CommandFailed, "Failed to build image with name '#{dname}' using dockerfile '#{dockerfile}'. Error was : #{cr.err_stream}"
  end

  reuse = false
  again = true
  while again
    contName = pmt.ask(" Please provide a name for container : ", required: true)
    ir = cf.find_from_all_container(contName)
    if ir.successful?
      if ir.is_out_stream_empty?
        # not found
        again = false
      else
        reuse = pmt.yes? "Given container name '#{contName}' already exist. Do you want to reuse the existing container? "
        if reuse
          
          again = false
        else

          again = false
        end
      end
    end
  end

  if reuse
    rcf = cf.find_running_container(contName)
    if rcf.successful?
      if rcf.is_out_stream_empty?
        # not found
        scrv = cf.start_container(contName)
        if not scrv.successful?
          raise CommandFailed, "Failed to start container '#{contName}'. Error was : #{scrv.err_stream}"
        end

        ucmd = pmt.ask(" Command to be run inside the container. Empty to attach to existing session : ", value: "/bin/bash")
        if is_empty?(ucmd)
          cf.attach_container(contName).run
        else
          cf.run_command_in_running_container(contName, ucmd, tty: true, interactive: true).run
        end

      end
    end

  else

    @workspace_root = "/opt"
    @shared_dirs = {}

    #@workspace_root = pmt.ask(" Where is the root of the workspace to be? : ", required: true, default: "/opt")

    mount = []
    res = find_local_dev_gems
    if not res.empty?
      
      STDOUT.puts "Found #{res.length} development gems in the configuration"

      res.each do |name, path|
        proot = pmt.ask("Found development gem path '#{path}'. Where would you want to map the gem inside the Docker? ", required: true, default: @workspace_root)
        dkPath = File.join(proot, path)
        mount << { path => dkPath }
        @shared_dirs[name] = tsrc 
      end

    end

    mapProjectDir = pmt.ask(" Where do you want to map the current directory? Empty to skip mapping : ", default: @workspace_root)
    if not_empty?(mapProjectDir)
      mount << { Dir.getwd => mapProjectDir }
    end

    reqVolMap = block.call(:volume_mapping_required?)
    if reqVolMap

      loop do

        block.call(:already_mapped, mount)

        src = block.call(:source_prompt, { control: [ "Empty to end" ] })
        if is_empty?(src)
          block.call(:volume_mapping_skipped)
          break
        end

        dest = block.call(:destination_prompt, src)
        mount << { src => dest }

        add_to_bundle = block.call(:add_to_bundle?, dest)
        if add_to_bundle
          @shared_dirs[File.basename(dest)] = dest
        end

        #repeat = block.call(:add_more_volume_mapping?)
        #break if not repeat

      end

    end

    @workspace_root = "/opt"
    @shared_dirs = {}

    block.call(:prompt_mount_points_starting)

    mount = []
    res = find_local_dev_gems
    #puts "Found #{res.length} local gems #{res}"
    if not res.empty?

      transferMapping = block.call(:transfer_dev_gem_mapping?, res)
      if transferMapping
        res.each do |name, path|
          loop do
            if not File.exist?(path)
              path = block.call(:dev_gem_path_not_found, path)
            else
              break
            end
          end
          tsrc = block.call(:workspace_root_inside_docker, @workspace_root, name, path)
          mount << { path => tsrc }
          @shared_dirs[name] = tsrc 
        end
      end

    end

    mapProjectDir = block.call(:map_project_dir, @workspace_root)
    if not_empty?(mapProjectDir)
      mount << { Dir.getwd => mapProjectDir }
    end

    reqVolMap = block.call(:volume_mapping_required?)
    if reqVolMap

      loop do

        block.call(:already_mapped, mount)

        src = block.call(:source_prompt, { control: [ "Empty to end" ] })
        if is_empty?(src)
          block.call(:volume_mapping_skipped)
          break
        end

        dest = block.call(:destination_prompt, src)
        mount << { src => dest }

        add_to_bundle = block.call(:add_to_bundle?, dest)
        if add_to_bundle
          @shared_dirs[File.basename(dest)] = dest
        end

        #repeat = block.call(:add_more_volume_mapping?)
        #break if not repeat

      end

    end



    nc = cf.create_container_from_image(dname, { interactive: true, tty: true, container_name: contName })

  end


rescue Exception => ex
  STDERR.puts "\n Exception raised : #{ex.message} \n"
end

